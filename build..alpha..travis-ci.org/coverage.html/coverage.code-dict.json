{"/home/travis/build/npmtest/node-npmtest-grunt-html/test.js":"/* istanbul instrument in package npmtest_grunt_html */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html/lib.npmtest_grunt_html.js":"/* istanbul instrument in package npmtest_grunt_html */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_html = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_html = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-html && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_html */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_html\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_html.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_html.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_html.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_html.__dirname + '/lib.npmtest_grunt_html.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/chunkify.js":"'use strict';\r\n\r\nmodule.exports = function( files, maxChars ) {\r\n  var filesChunk = [];\r\n  var chunk = '';\r\n\r\n  for ( var f = 0, len = files.length; f < len; f++ ) {\r\n    if ( chunk.length + ( files[ f ].length + 1 ) > maxChars ) {\r\n      filesChunk.push( chunk );\r\n      chunk = '';\r\n    }\r\n    chunk += '\"' + files[ f ] + '\" ';\r\n  }\r\n  filesChunk.push( chunk );\r\n  return filesChunk;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/htmllint.js":"'use strict';\r\n\r\nmodule.exports = function( config, done ) {\r\n  var path = require( 'path' );\r\n  var exec = require( 'child_process' ).exec;\r\n  var chunkify = require( './chunkify' );\r\n  var async = require( 'async' );\r\n  var javadetect = require( './javadetect' );\r\n  var jar = require( 'vnu-jar' );\r\n\r\n  var maxChars = 5000;\r\n\r\n  // increase child process buffer to accommodate large amounts of\r\n  // validation output. ( default is a paltry 200k. )\r\n  // http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback\r\n  var maxBuffer = 20000 * 1024;\r\n\r\n  // replace left/right quotation marks with normal quotation marks\r\n  function normalizeQuotationMarks( str ) {\r\n    if ( str ) {\r\n      str = str.replace( /[\\u201c\\u201d]/g, '\"' );\r\n    }\r\n    return str;\r\n  }\r\n\r\n  // parse and, if needed, normalize error messages from HttpClient to java -jar format\r\n  // java -jar: one object containing messages for all files\r\n  //   { messages: [{ message, type, url, ... }, ...] }\r\n  // HttpClient: one object per file, separated by a newline, each object containing messages for only that file\r\n  //   { messages: [{ message, type, ...}, ...], url }\\n{ ... }\r\n  function parseErrorMessages( errors ) {\r\n    var parsed = JSON.parse( config.server ? '[' + errors.trim().replace( /\\n/g, ',' ) + ']' : errors );\r\n    var messages = parsed.messages;\r\n    if ( config.server ) {\r\n      // extract \"messages\" property from each object and set the url of each message\r\n      // this results in an array of arrays instead of array of objects, which is then flattened by concatenation\r\n      messages = Array.prototype.concat.apply([], parsed.map(function( file ) {\r\n        return file.messages.map(function( message ) {\r\n          message.url = file.url;\r\n          return message;\r\n        });\r\n      }) );\r\n    }\r\n    return messages;\r\n  }\r\n\r\n  // determine proper jarfile command and arguments\r\n  function cmd( java, chunk ) {\r\n    var args = '';\r\n    if ( config.server ) {\r\n      if ( config.server.host ) {\r\n        args += ' -Dnu.validator.client.host=' + config.server.host;\r\n      }\r\n      if ( config.server.port ) {\r\n        args += ' -Dnu.validator.client.port=' + config.server.port;\r\n      }\r\n      args += ' -Dnu.validator.client.out=json nu.validator.client.HttpClient';\r\n    } else {\r\n      args += ' --format json';\r\n    }\r\n    var invoke = ( config.server ? '-cp' : '-jar' ) + ' \"' + jar + '\"' + args;\r\n    // command to call java, increasing the default stack size for ia32 versions of the JRE and using the default setting for x64 versions\r\n    return 'java ' + ( java.arch === 'ia32' ? '-Xss512k ' : '' ) + invoke + ' ' + chunk;\r\n  }\r\n\r\n  if ( !config.files.length ) {\r\n    return done( null, []);\r\n  }\r\n\r\n  javadetect(function( err, java ) {\r\n    if ( err ) {\r\n      throw err;\r\n    }\r\n\r\n    if ( java.version[ 0 ] !== '1' || ( java.version[ 0 ] === '1' && java.version[ 2 ] < '8' ) ) {\r\n      throw new Error( '\\nUnsupported Java version used: ' + java.version + '. v1.8 is required!' );\r\n    }\r\n\r\n    var files = config.files.map( path.normalize );\r\n    async.mapSeries( chunkify( files, maxChars ), function( chunk, cb ) {\r\n\r\n      exec( cmd( java, chunk ), {\r\n        'maxBuffer': maxBuffer\r\n      }, function( error, stdout, stderr ) {\r\n        if ( error && ( error.code !== 1 || error.killed || error.signal ) ) {\r\n          cb( error );\r\n          return;\r\n        }\r\n\r\n        stderr = config.server ? stdout : stderr;\r\n        var result = [];\r\n        if ( stderr ) {\r\n          try {\r\n            result = parseErrorMessages( stderr );\r\n          } catch ( err ) {\r\n            throw new Error( err + '\\nInvalid input follows below:\\n\\n' + stderr );\r\n          }\r\n          result.forEach(function( message ) {\r\n            if ( message.url ) {\r\n              message.file = path.relative( '.', message.url.replace( path.sep !== '\\\\' ? 'file:' : 'file:/', '' ) );\r\n            }\r\n            if ( config.absoluteFilePathsForReporter ) {\r\n              message.file = path.resolve( message.file );\r\n            }\r\n          });\r\n          if ( config.ignore ) {\r\n            var ignore = config.ignore instanceof Array ? config.ignore : [ config.ignore ];\r\n            result = result.filter(function( message ) {\r\n              // iterate over the ignore rules and test the message agains each rule.\r\n              // A match should return false, which causes every(  ) to return false and the message to be filtered out.\r\n              return ignore.every(function( currentValue ) {\r\n                if ( currentValue instanceof RegExp ) {\r\n                  return !currentValue.test( message.message );\r\n                }\r\n                return normalizeQuotationMarks( currentValue ) !== normalizeQuotationMarks( message.message );\r\n              });\r\n            });\r\n          }\r\n        }\r\n        cb( null, result );\r\n      });\r\n    }, function( error, results ) {\r\n      if ( error ) {\r\n        done( error );\r\n        return;\r\n      }\r\n\r\n      var result = [];\r\n      for ( var r = 0, len = results.length; r < len; r++ ) {\r\n        result = result.concat( results[ r ] );\r\n      }\r\n      done( null, result.filter(function( item ) {\r\n        return config.errorlevels.indexOf( item.type ) !== -1;\r\n      }) );\r\n    });\r\n  });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/javadetect.js":"'use strict';\r\n\r\nvar exec = require( 'child_process' ).exec;\r\n\r\nmodule.exports = function( callback ) {\r\n  exec( 'java -version', function( error, stdout, stderr ) {\r\n    if ( error ) {\r\n      return callback( error );\r\n    }\r\n\r\n    callback( null, {\r\n      version: stderr.match( /(?:java|openjdk) version \"(.*)\"/ )[ 1 ],\r\n      arch: stderr.match( /64-Bit/ ) ? 'x64' : 'ia32'\r\n    });\r\n  });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/reporters.js":"'use strict';\r\n\r\nvar path = require( 'path' );\r\nvar chalk = require( 'chalk' );\r\n\r\n// Default Grunt reporter\r\nvar defaultReporter = function( result ) {\r\n  var out = result.map(function( message ) {\r\n    var output = chalk.cyan( message.file ) + ' ';\r\n    output += chalk.red( '[' ) + chalk.yellow( 'L' + message.lastLine ) +\r\n      chalk.red( ':' ) + chalk.yellow( 'C' + message.lastColumn ) + chalk.red( '] ' );\r\n    output += message.message;\r\n    return output;\r\n  });\r\n  return out.join( '\\n' );\r\n},\r\n\r\n// Select a reporter ( if not using the default Grunt reporter )\r\nselectReporter = function( options ) {\r\n  if ( options.reporter === 'checkstyle' ) {\r\n    // Checkstyle XML reporter\r\n    options.reporter = '../lib/reporters/checkstyle.js';\r\n  } else if ( options.reporter === 'json' ) {\r\n    // JSON reporter\r\n    options.reporter = '../lib/reporters/json.js';\r\n  } else if ( options.reporter === 'junit' ) {\r\n    // JUnit reporter\r\n    options.reporter = '../lib/reporters/junit.js';\r\n  } else if ( options.reporter !== null && options.reporter !== undefined ) {\r\n    // Custom reporter\r\n    options.reporter = path.resolve( process.cwd(  ), options.reporter );\r\n  }\r\n\r\n  var reporter;\r\n  if ( options.reporter ) {\r\n    reporter = require( options.reporter );\r\n  } else {\r\n    reporter = defaultReporter;\r\n  }\r\n\r\n  return reporter;\r\n};\r\n\r\nmodule.exports = {\r\n  defaultReporter: defaultReporter,\r\n  selectReporter: selectReporter\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/tasks/html.js":"/*\r\n * grunt-html\r\n * https://github.com/jzaefferer/grunt-html\r\n *\r\n * Copyright Jörn Zaefferer\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nvar path = require( 'path' );\r\nvar htmllint = require( '../lib/htmllint' );\r\nvar reporters = require( '../lib/reporters' );\r\n\r\nmodule.exports = function( grunt ) {\r\n\r\n  grunt.registerMultiTask( 'htmllint', 'Validate html files', function() {\r\n    var done = this.async(),\r\n      files = grunt.file.expand( this.filesSrc ),\r\n      options = this.options({\r\n        files: files,\r\n        force: false,\r\n        absoluteFilePathsForReporter: false,\r\n        errorlevels: [ 'info', 'warning', 'error' ]\r\n      }),\r\n      force = options.force,\r\n      reporterOutput = options.reporterOutput,\r\n      reporter;\r\n\r\n    htmllint( options, function( error, result ) {\r\n      var passed = true,\r\n        output,\r\n        uniqueFiles;\r\n\r\n      try {\r\n        reporter = reporters.selectReporter( options );\r\n      } catch ( err ) {\r\n        grunt.fatal( err );\r\n      }\r\n\r\n      if ( error ) {\r\n        passed = force;\r\n        grunt.log.error( error );\r\n      } else if ( !result.length ) {\r\n        grunt.log.ok( files.length + ' ' + grunt.util.pluralize( files.length, 'file/files' ) + ' lint free.' );\r\n      } else {\r\n        passed = force;\r\n        output = reporter( result );\r\n        if ( !reporterOutput ) {\r\n          grunt.log.writeln( output );\r\n        }\r\n        uniqueFiles = result\r\n          .map(function( elem ) {\r\n            return elem.file;\r\n          })\r\n          .filter(function( file, index, resultFiles ) {\r\n            return resultFiles.indexOf( file ) === index;\r\n          });\r\n        grunt.log.error( files.length + ' ' + grunt.util.pluralize( files.length, 'file/files' ) + ' checked, ' +\r\n                        result.length + ' ' + grunt.util.pluralize( result.length, 'error/errors' ) + ' in ' +\r\n                        uniqueFiles.length + ' ' + grunt.util.pluralize( uniqueFiles.length, 'file/files' ) );\r\n      }\r\n\r\n      // Write the output of the reporter if wanted\r\n      if ( reporterOutput && result.length > 0 ) {\r\n        reporterOutput = grunt.template.process( reporterOutput );\r\n        var destDir = path.dirname( reporterOutput );\r\n        if ( !grunt.file.exists( destDir ) ) {\r\n          grunt.file.mkdir( destDir );\r\n        }\r\n        grunt.file.write( reporterOutput, output );\r\n        grunt.log.ok( 'Report \"' + reporterOutput + '\" created.' );\r\n      }\r\n\r\n      done( passed );\r\n    });\r\n  });\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/reporters/checkstyle.js":"/*\r\n * Author: Josh Hagins\r\n * https://github.com/jawshooah\r\n *\r\n * Modified from the original by: Boy Baukema\r\n * https://github.com/relaxnow\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function( results ) {\r\n  var path = require( 'path' ),\r\n    files = {},\r\n    out = [],\r\n    pairs = {\r\n      '&': '&amp;',\r\n      '\"': '&quot;',\r\n      '\\'': '&apos;',\r\n      '<': '&lt;',\r\n      '>': '&gt;'\r\n    };\r\n\r\n  function encode( s ) {\r\n    for ( var r in pairs ) {\r\n      if ( typeof s !== 'undefined' ) {\r\n        s = s.replace( new RegExp( r, 'g' ), pairs[ r ] );\r\n      }\r\n    }\r\n    return s || '';\r\n  }\r\n\r\n  results.forEach(function( result ) {\r\n    // Register the file\r\n    result.file = path.normalize( result.file );\r\n    if ( !files[ result.file ] ) {\r\n      files[ result.file ] = [];\r\n    }\r\n\r\n    // Add the error\r\n    files[ result.file ].push({\r\n      severity: result.type,\r\n      line: result.lastLine,\r\n      column: result.lastColumn,\r\n      message: result.message,\r\n      source: 'htmllint.Validation' + ( result.type === 'error' ? 'Error' : 'Warning' )\r\n    });\r\n  });\r\n\r\n\r\n  out.push( '<?xml version=\"1.0\" encoding=\"utf-8\"?><checkstyle>' );\r\n\r\n  for ( var fileName in files ) {\r\n    if ( files.hasOwnProperty( fileName ) ) {\r\n      out.push( '\\t<file name=\"' + fileName + '\">' );\r\n      for ( var i = 0, len = files[ fileName ].length; i < len; i++ ) {\r\n        var issue = files[ fileName ][ i ];\r\n        out.push(\r\n          '\\t\\t<error ' +\r\n            'line=\"' + issue.line + '\" ' +\r\n            'column=\"' + issue.column + '\" ' +\r\n            'severity=\"' + issue.severity + '\" ' +\r\n            'message=\"' + encode( issue.message ) + '\" ' +\r\n            'source=\"' + issue.source + '\" ' +\r\n            '/>'\r\n         );\r\n      }\r\n      out.push( '\\t</file>' );\r\n    }\r\n  }\r\n\r\n  out.push( '</checkstyle>' );\r\n\r\n  return out.join( '\\n' );\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/reporters/json.js":"/*\r\n * Author: Josh Hagins\r\n * https://github.com/jawshooah\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function( results ) {\r\n  results.forEach(function( result ) {\r\n    // result already has 'file' property, 'url' is redundant\r\n    delete result.url;\r\n  });\r\n  return JSON.stringify( results );\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-html/node_modules/grunt-html/lib/reporters/junit.js":"/*\r\n * Author: Iestyn Polley\r\n * https://github.com/iestyn\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function( results ) {\r\n  var path = require( 'path' ),\r\n    files = {},\r\n    out = [],\r\n    pairs = {\r\n      '&': '&amp;',\r\n      '\"': '&quot;',\r\n      '\\'': '&apos;',\r\n      '<': '&lt;',\r\n      '>': '&gt;'\r\n    };\r\n\r\n  function encode( s ) {\r\n    for ( var r in pairs ) {\r\n      if ( typeof s !== 'undefined' ) {\r\n        s = s.replace( new RegExp( r, 'g' ), pairs[ r ] );\r\n      }\r\n    }\r\n    return s || '';\r\n  }\r\n\r\n  results.forEach(function( result ) {\r\n    // Register the file\r\n    result.file = path.normalize( result.file );\r\n    if ( !files[ result.file ] ) {\r\n      files[ result.file ] = [];\r\n    }\r\n\r\n    // Add the error\r\n    files[ result.file ].push({\r\n      severity: result.type,\r\n      line: result.lastLine,\r\n      column: result.lastColumn,\r\n      message: result.message,\r\n      source: 'htmllint.Validation' + ( result.type === 'error' ? 'Error' : 'Warning' )\r\n    });\r\n\r\n  });\r\n\r\n  out.push( '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<testsuite name=\"htmllint\" tests=\"' + Object.keys( files ).length + '\" failures=\"0\" errors=\"' + results.length + '\">' );\r\n\r\n  for ( var fileName in files ) {\r\n    if ( files.hasOwnProperty( fileName ) ) {\r\n      out.push( '<testcase name=\"' + fileName + '\">\\n<error message=\"' + files[ fileName ].length + ' Errors\">' );\r\n      for ( var i = 0, len = files[ fileName ].length; i < len; i++ ) {\r\n        var issue = files[ fileName ][ i ];\r\n        out.push(\r\n          ( i + 1 ) + ' ' +\r\n          'line ' + issue.line + ', ' +\r\n          'char ' + issue.column + ': ' +\r\n          encode( issue.message )\r\n       );\r\n      }\r\n      out.push( '</error>\\n</testcase>' );\r\n    }\r\n  }\r\n\r\n  out.push( '</testsuite>' );\r\n\r\n  return out.join( '\\n' );\r\n};\r\n"}